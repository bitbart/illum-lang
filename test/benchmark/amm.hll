contract AMM  {

	uint m_supply; // total supply of minted tokens (in the AMM or users' wallets) 

	constructor(uint x0, uint x1, uint m) input(x0:T0) input(x1:T1) input(m:M01) {
        require(x0>0 && x1>0 && m>0);
		m_supply = m;
	} 

    function addLiquidity(uint x0, uint x1) input(x0:T0) input(x1:T1) { 
		uint m;
   		require(balance(T0)*(balance(T1)-x1) == (balance(T0)-x0)*balance(T1));
		m = (x0 * (m_supply - balance(M01))) / (balance(T0) - x0);
		a.transfer(m:M01);
   	}

	function removeLiquidity(address a, uint m) input(m:M01) {
		uint x0;
		uint x1;
		x0 = (m * balance(T0)) / (m_supply - balance(M01) + m);
		x1 = (m * balance(T1)) / (m_supply - balance(M01) + m);
		require(x0 < balance(T0) && x1 < balance(T1));
		a.transfer(x0:T0);
		a.transfer(x1:T1);
	}

  	function swap0(uint x, address a, uint min_t1_out) input(x:T0) {
		uint t1_out;
		t1_out = x*balance(T1)/balance(T0);
        require(balance(T1) > t1_out && t1_out>=min_t1_out);
  		a.transfer(t1_out:T1);
  	}

    function swap1(uint x, address a, uint min_t0_out) input(x:T1) {
		uint t0_out; 
		t0_out = x*balance(T0)/balance(T1);
        require(balance(T0) > t0_out && t0_out>=min_t0_out);
    	a.transfer(t0_out:T0);
  	}
}
