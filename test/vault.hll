/**************************************************************************************************** 
    Vaults are a security mechanism to prevent cryptocurrency from being immediately withdrawn by 
    an adversary who has stolen the owner's private key. 
    To create the vault, the owner specifies a recovery key (distinct from the primary owner key), 
    which can be used to cancel a withdraw request, and a wait time that has to elapse between 
    a withdraw request and the actual currency transfer to the chosen recipient.

    Once the contract has been created, anyone can deposit native cryptocurrency in the vault through 
    an external transaction.

    The contract can be in one of two states:
    - IDLE: the vault is waiting for a withdraw request;
    - REQ: the owner has issued a withdraw request that has not been finalized yet. In this state, the owner 
    can choose to finalize the request or to cancel it. Finalization can only happen after the wait time 
    has passed since the request. During the wait time, the request can be cancelled by using the recovery key.
    Concretely, the keys are represented as addresses: requiring that an action can only be performed 
    by someone knowing a certain key corresponds to requiring that a method is called by the 
    corresponding address.
 ****************************************************************************************************/

contract Vault {
    address owner;
    address recovery;
    uint wait_time;
    address req_rcv;
    uint req_time;
    uint req_amt;
    address time_oracle;
    uint curr_time;
    
    constructor(address a, address r, address to, uint wt) auth(a) auth(r) {
    	require(a != r);
        owner = a;
        recovery = r;
        wait_time = wt;
        time_oracle = to;
    } next(set_time)

    function set_time(uint time) auth(time_oracle) {
        curr_time = time;
    } next(receive,withdraw,set_time)

    function receive(uint x) input(x:T) { 
    } next(receive,withdraw,set_time)

    function withdraw(address rcv, uint amt) auth(owner) {
        require(amt <= balance(T));
        req_time = curr_time;
        req_amt = amt;
        req_rcv = rcv;
    } next(finalize,cancel)

    function finalize() auth(owner) after(req_time + wait_time) {
        req_rcv.transfer(req_amt:T);
    } next(set_time)

    function cancel() auth(recovery) {
    } next(set_time)
}