contract Vault {
    address owner;
    address recovery;
    uint wait_time;
    address req_rcv;
    uint req_time;
    uint req_amt;
    
    constructor(address a, address r, uint wt) auth(a) auth(r) {
    	require(a != r);
        owner = a;
        recovery = r;
        wait_time = wt;
    } next(receive,withdraw)

    function receive() input(x:T) { 
    } next(receive,withdraw)

    function withdraw(address rcv, uint amt, uint time) auth(owner) {
        require(amt <= balance(T));
        req_time = time;
        req_amt = amt;
        req_rcv = rcv;
    } next(finalize,cancel)

    function finalize() auth(owner) after(req_time + wait_time) {
        receiver.transfer(req_amt:T);
    } next(receive,withdraw)

    function cancel() auth(recovery) {
    } next(receive,withdraw)
}