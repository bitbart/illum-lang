contract AMM  {

	constructor(uint x0, uint x1) input(x0:T0,x1:T1) {
        require(x0>0 && x1>0);
	} 

    function addliq(uint x0, uint x1) input(x0:T0,x1:T1) { 
   		require(balance(T0)+x0)*balance(T1) == balance(T0)*(balance(T1)+x1);
   	}
    
  	function swap0(uint x, address A, uint y) input(x:T0) {
		tok = x*balance(T1)/(balance(T0)+x);
        require(balance(T1) > tok && tok>=y);
  		A.transfer(tok:T1);
  	}

    function swap1(uint x, address A, uint y) input(x:T1) { 
		tok = x*balance(T0)/(balance(T1)+x);
        require(balance(T0) > tok && tok>=y);
    	A.transfer(tok:T0);
  	}
}
